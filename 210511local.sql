DESC EMP;
SELECT SAL
TO_CHAR(SAL, '$999,999') AS SAL_$,
TO_CHAR(SAL, 'L999,999') AS SAL_L,
TO_CHAR(SAL, '999,999.00') AS SAL_1,
TO_CHAR(SAL, '000,999,999,00') AS SAL_2,
TO_CHAR(SAL, '000999999.99') AS SAL_3,
TO_CHAR(SAL, '999,999,00') AS SAL_4 FROM EMP; -- 여러가지 숫자형식 사용하여 급여 출력하기
SELECT 1300 - '1500' FROM DUAL;
SELECT '1,300' - '1,500' FROM DUAL; -- 숫자 사이에 쉼표가 들어가서
SELECT TO_NUMBER('1,300','999,999') - TO_NUMBER('1,500','999,999') FROM DUAL; -- TO_NUMBER함수로 연산하여 출력
SELECT TO_DATE('2018-07-14','YYYY-MM-DD') AS TODATE1,
TO_DATE('20180714','YYYY-MM-DD') AS TODATE2 FROM DUAL;
SELECT * FROM EMP WHERE HIREDATE > TO_DATE('1981/06/01','YYYY/MM/DD'); --19810601이후 입사한 사원정보 출력

SELECT TO_DATE('49/12/10','YY/MM/DD') AS YY_YEAR_49,
TO_DATE('49/12/10','RR/MM/DD') AS RR_YEAR_49,
TO_DATE('50/12/10','YY/MM/DD') AS YY_YEAR_50,
TO_DATE('50/12/10','RR/MM/DD') AS RR_YEAR_50,
TO_DATE('51/12/10','YY/MM/DD') AS YY_YEAR_51,
TO_DATE('51/12/10','RR/MM/DD') AS RR_YEAR_51 FROM DUAL; -- 여러 형식으로 날짜 데이터 출력

SELECT * FROM  WHERE HIREDATE > TO_DATE('1980/10/15','YYYY/MM/DD');

SELECT EMPNO, ENAME, SAL, COMM, SAL+COMM,
NVL(COMM,0), SAL+NVL(COMM,0) FROM EMP; -- NVL함수는 NULL 처리를 위해 자주 사용
SELECT EMPNO, ENAME, COMM
, NVL2(COMM,'0','X')
, NVL2(COMM, SAL*12+COMM, SAL*12) AS ANNSAL FROM EMP;

SELECT EMPNO, ENAME, COMM
, NVL2(COMM,'0','X')
, NVL2(COMM,SAL*12+COMM, SAL*12) AS ANNSAL FROM EMP;

SELECT EMPNO, ENAME, JOB, SAL
, DECODE (JOB
, 'MANAGER', SAL*1,1
, 'SALESMAN', SAL*1.05
, 'ANALYST', SAL
, SAL*1.03) AS UPSAL FROM EMP; -- 특정 열 값이나 데이터 값에 따라 어떤 데이터를 반환할지 정하는 DECODE함수(단일행함수)
-- 맨 마지막 데이터, 조건에 해당하는 값이 없을 때 반환값 지정하지않으면 NULL로 반환
SELECT EMPNO, ENAME, JOB, SAL
, CASE JOB
WHEN 'MANAGER' THEN SAL * 1.1
WHEN 'SALESMAN' THEN SAL * 1.05
WHEN 'ANALYST' THEN SAL
ELSE SAL* 1.03
END AS UPASL FROM EMP; --각 조건에 사용하는 데이터가 서로 상관없고 기준 데이터값이 같은 데이터 외에 다양한 조건 사용 가능한 CASE문

SELECT EMPNO, ENAME,COMM
, CASE
WHEN COMM IS NULL THEN '해당사항 없음'
WHEN COMM = 0 THEN '수당없음'
WHEN COMM >0 THEN '수당 :' || COMM
END AS COMM_TEXT FROM EMP;

SELECT SAL FROM EMP;
SELECT SUM(SAL) FROM EMP; -- SUM함수 사용하여 SAL합계 출력하기
SELECT ENMAE, SUM(SAL) FROM EMP;
SELECT SUM(COMM) FROM EMP;
SELECT SUM(DISTINCT SAL),
SUM(ALL SAL), SUM(SAL) FROM EMP;
SELECT SUM(SAL), SUM(COMM) FROM EMP;
SELECT COUNT(*) FROM EMP;
SELECT COUNT(*) FROM EMP WHERE DEPTNO=30;
SELECT COUNT(DISTINCT SAL)
, COUNT(ALL SAL)
, COUNT(SAL) FROM EMP;
SELECT COUNT(COMM) FROM EMP; --COUNT함수 사용시 NULL데이터가 포함되어도 반환개수에서는 제외됨
SELECT COUNT(COMM) FROM EMP WHERE COMM IS NOT NULL; -- COMM열에 IS NOT NULL조건을 사용해도 같은 결과가 출력됨

SELECT MAX(SAL) FROM EMP WHERE DEPTNO = 10; 
SELECT MIN(SAL) FROM EMP WHERE DEPTNO = 10; -- 숫자 데이터에 MAX, MIN함수 사용하기

SELECT MAX(HIREDATE) FROM EMP WHERE DEPTNO = 20; -- 날짜 데이터에 MAX, MIN함수 사용하기, 입사 년도가 제일 큰 사람(최근입사자)
SELECT MIN(HIREDATE) FROM EMP WHERE DEPTNO = 20; -- 입사 년도가 제일 작은 사람(가장 오래된 입사자)

SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30; -- 평균급여 출력하기
SELECT AVG(DISTINCT SAL) FROM EMP WHERE DEPTNO = 30; -- 중복 제거한 열의 평균급여 출력
SELECT AVG(COMM) FROM EMP WHERE DEPTNO=30;
SELECT AVG(DISTINCT COMM) FROM EMP WHERE DEPTNO=30;
SELECT AVG(ALL COMM) FROM EMP WHERE MGR IS NOT NULL;
SELECT AVG(ALL COMM) FROM EMP WHERE MGR IS NULL;

SELECT AVG(ALL COMM) FROM EMP WHERE ENAME LIKE '';

SELECT AVG(SAL), '10' AS DEPTNO FROM EMP WHERE DEPTNO =10
UNION ALL
SELECT AVG(SAL), '20' AS DEPTNO FROM EMP WHERE DEPTNO =20
UNION ALL
SELECT AVG(SAL), '30' AS DEPTNO FROM EMP WHERE DEPTNO =30;
-- 한눈에 보기에도 번거로운 방법일 뿐만 아니라 이후에 특정 DEPTNO를 추가하거나 삭제할 때마다 SQL문을 수정해야하므로
--바람직하지 않다

SELECT AVG(SAL), DEPTNO FROM EMP
GROUP BY DEPTNO; -- GROUP BY절을 사용하여 DEPTNO별 AVG(SAL)출력

SELECT DEPTNO, JOB, AVG(SAL) FROM EMP
GROUP BY DEPTNO, JOB
ORDER BY DEPTNO ASC, JOB DESC; --DEPTNO및 AVG(SAL), JOB 정렬

SELECT AVG(COMM), DEPTNO FROM EMP GROUP BY DEPTNO
ORDER BY DEPTNO;

SELECT ENAME, DEPTNO, AVG(SAL) FROM EMP GROUP BY DEPTNO; -- GROUP BY절에 명시하지 않으면 SELECT 절에서 사용할수X
-- 각 열별 데이터수 유의
SELECT DEPTNO, JOB, AVG(SAL) FROM EMP
GROUP BY DEPTNO, JOB
ORDER BY DEPTNO, JOB;

SELECT DEPTNO, JOB, AVG(SAL) FROM EMP
GROUP BY DEPTNO, JOB
HAVING AVG(SAL) >=2000
ORDER BY DEPTNO, JOB;

SELECT DEPTNO, JOB, AVG(SAL) FROM EMP
WHERE AVG(SAL) >=2000 -- 출력 행을 제한하는 WHERE절에서는 그룹화된 데이터 AVG(SAL)을 제한하는 조건식을 지정할수X
GROUP BY DEPTNO, JOB
ORDER BY DEPTNO, JOB; -- 그룹 함수는 허가되지 않습니다

SELECT DEPTNO, JOB, AVG(SAL) FROM EMP
GROUP BY DEPTNO, JOB
HAVING AVG(SAL) >= 2000
ORDER BY DEPTNO, JOB;

SELECT DEPTNO, JOB, AVG(SAL) FROM EMP
WHERE SAL <= 3000 -- WHERE절이 GROUP BY절, HAVING절보다 먼저 실행됨
GROUP BY DEPTNO, JOB
HAVING AVG(SAL) >= 2000 
ORDER BY DEPTNO, JOB;

SELECT DEPTNO, JOB, SAL FROM EMP
WHERE SAL<= 3000
ORDER BY DEPTNO, JOB;

--1) 부서번호가 10번인 부서의 사람중 사원번호, 이름, 월급을 출력
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10;
--2) 사원번호가 7369인 사람 중 이름, 입사일, 부서번호를 출력
SELECT EMPNO,ENAME, HIREDATE,DEPTNO FROM EMP WHERE EMPNO = 7369;
--3) 이름이 ALLEN인 사람의 모든 정보 출력
SELECT * FROM EMP WHERE ENAME = 'ALLEN';
--4) 입사일이 80/12/17인 사원의 이름, 부서번호, 월급 출력
SELECT HIREDATE AS 고용일 ,ENAME AS 이름,DEPTNO AS 부서번호,SAL/12 AS 월급 FROM EMP 
WHERE HIREDATE = '80/12/17';
--5) 직업이 MANAGER가 아닌 사람의 모든 정보를 출력
SELECT * FROM EMP WHERE JOB != 'MANAGER';
--6) 입사일이 81/04/02 이후에 입사한 사원의 정보를 출력
SELECT * FROM EMP WHERE HIREDATE>'81/04/02' ORDER BY HIREDATE;
--7) 급여가 $800이상인 사람의 이름, 급여, 부서번호를 출력
SELECT ENAME, SAL, DEPTNO FROM EMP WHERE SAL > 800;
--8) 부서번호가 20이상인 사원의 모든 정보를 출력
SELECT * FROM EMP WHERE DEPTNO >= 20;
--9) 이름이 K로 시작하는 사람보다 높은 이름을 가진 사람의 모든 정보를 출력
SELECT * FROM EMP WHERE ENAME > 'K%';
--10) 입사일이 81/12/09보다 먼저 입사한 사람들의 모든 정보를 출력
SELECT * FROM EMP WHERE HIREDATE < '81/12/09';