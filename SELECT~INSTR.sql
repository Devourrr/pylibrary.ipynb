SELECT ENAME, DEPTNO FROM EMP; -- 테이블 열 출력하기
SELECT * FROM EMP ORDER BY EMPNO; -- ORDER BY 오름차순 ASC 내림차순 DESC
SELECT * FROM EMP ORDER BY EMPNO DESC;
SELECT * FROM EMP ORDER BY SAL DESC;
SELECT * FROM EMP ORDER BY DEPTNO ASC, SAL DESC; -- 오름차순 내림차순 동시에 사용
-- 데이터 정렬은 많은 자원, 비용 소모하가 때문에 꼭 필요한 경우에만 ORDER BY절 사용
SELECT * FROM EMP WHERE DEPTNO = 30;
SELECT * FROM EMP WHERE EMPNO = 7782; -- WHERE 절
SELECT * FROM EMP WHERE EMPNO = 7499
AND DEPTNO = 30;
SELECT * FROM EMP WHERE DEPTNO = 30 OR JOB = 'CLERK';
SELECT * FROM EMP WHERE DEPTNO = 20 OR JOB = 'SALESMAN';
SELECT * FROM EMP WHERE SAL * 12 = 36000; -- 곱셈 산술연산자
SELECT * FROM EMP WHERE SAL>=3000; -- 대소 비교 연산자
SELECT * FROM EMP WHERE SAL>=2500 AND JOB = 'ANALYST';
SELECT * FROM EMP WHERE ENAME >= 'F'; -- 문자열 대소 비교 연산자( ENAME 첫 문자가 'F'와 같거나 뒤쪽인 것
SELECT * FROM EMP WHERE ENAME <= 'FORZ'; -- ENAME 열 값이 'FORZ'를 포함한 문자열보다 알파벳 순서로 앞에있는 행 출력
SELECT * FROM EMP WHERE SAL!= 3000;
SELECT * FROM EMP WHERE SAL <> 3000;
SELECT * FROM EMP WHERE SAL ^= 3000; -- 등가비교 연산자, 셋 다 같은 결과 출력
SELECT * FROM EMP WHERE NOT SAL =3000; -- 논리부정연산자, 보통 IN, BETWEEN, ISNULL연산자와 함께 복합적으로 사용
-- 복잡한 여러개 조건식이 AND, OR로 묶여있는 상태에서 정반대 결과를 얻고자 할 때에는 유용하게 사용 가능
SELECT * FROM EMP WHERE JOB IN('MANAGER','SALASMAN','CLERK'); -- IN 연산자

SELECT * FROM EMP WHERE JOB NOT IN ('MANAGER','SALESMAN','CLERK'); -- IN연산자 + 논리부정 연산자

SELECT * FROM EMP WHERE DEPTNO IN (10, 20);

SELECT * FROM EMP WHERE SAL BETWEEN 2000 AND 3000; --BETWEEN A AND B 연산자
SELECT * FROM EMP WHERE SAL NOT BETWEEN 2000 AND 3000; -- NOT연산자 함께 활용
SELECT * FROM EMP WHERE ENAME LIKE 'S%'; -- ENAME열 값이 'S'로 시작하는 데이터를 조회, '_','%' = 와일드카드(특정문자, 문자열 대체 혹은 문자열데이터의 패턴 표기하는 특수 문자)
SELECT * FROM EMP WHERE ENAME LIKE '_L%'; -- ENAME 두 번째 문자는 'L', 그 앞에 반드시 한 문자가 와야함
SELECT * FROM EMP WHERE ENAME LIKE '%AM%'; -- 원하는 문자열 앞뒤 모두 와일드카드 붙이기 -> 어떤 단어가 포함된 검색기능 구현
SELECT * FROM EMP WHERE ENAME NOT LIKE '%AM%'; -- 원하는 문자열 포함되어있지 않은 데이터 출력
--SELECT * FROM SOME_TABLE WHERE SOME_COLUMN LIKE 'A\_A%' ESCAPE '\'; -- 데이터에 와일카드 기호가 포함된 경우 ESCAPE절 사용하면 데이터로서 문자로 다루기 가능
-- LIKE 연산자와 와일드 카드 문자의 성능은 데이터 조회성능과 직결되므로 중요하다
SELECT ENAME, SAL, SAL*12+COMM AS ANNSAL,COMM FROM EMP; -- NULL은 데이터 값이 완전히 비어있는 상태
SELECT * FROM EMP WHERE COMM = NULL; -- 등가 비교 연산자로 NULL비교, NULL은 비교해도 ㅜㅕㅣㅣ
SELECT * FROM EMP WHERE COMM IS NULL; -- 특정 열 데이터 NULL인지 확인하려면 IN NULL 연산자 사용
SELECT * FROM EMP WHERE MGR IS NOT NULL; -- 반대의 경우, 열 데이터가 NULL이 아닌 데이터 조회는 IS NOT NULL연산자
SELECT * FROM EMP WHERE SAL>NULL AND COMM IS NULL; -- AND연산자와 IS NULL연산자 사용하기
SELECT * FROM EMP WHERE SAL>NULL OR COMM IS NULL; -- OR연산자와 IS NULL연산자 사용하기
/* 결과값이 다른 이유 - AND연산자와 OR 연산자의 특징
AND - 양쪽 항목이 모두 TRUE인 경우에만 결과 값을 TRUE로 반환, 결과데이터가 출력
OR - 양쪽 항목중 어느 항목만 TRUE여도 결과 값을 TRUE로 반환*/
--SELECT EMPNO, ENAME, SAL,DEPTNO FROM

SELECT * FROM EMP WHERE ENAME LIKE '%S';
SELECT EMPNO, ENAME, JOB, SAL, DEPTNO FROM EMP
WHERE DEPTNO = 30 AND JOB = 'SALESMAN';
SELECT EMPNO,ENAME,SAL,DEPTNO FROM EMP
WHERE DEPTNO IN(20, 30) AND SAL>2000;
SELECT EMPNO,ENAME,SAL,DEPTNO FROM EMP
WHERE DEPTNO IN(20, 30)
INTERSECT
SELECT EMPNO,ENAME,SAL,DEPTNO FROM EMP
WHERE SAL > 2000;
SELECT * FROM EMP WHERE SAL>=2000
UNION
SELECT * FROM EMP WHERE SAL<2000;
SELECT ENAME, EMPNO, SAL, DEPTNO FROM EMP WHERE DEPTNO = 30
AND SAL NOT BETWEEN 1000 AND 2000;
SELECT * FROM EMP WHERE COMM IS NULL
AND MGR IS NOT NULL
AND JOB IN ('MANAGER','CLERK')
AND ENAME NOT LIKE '_% L';

SELECT ENAME, UPPER(ENAME), LOWER(ENAME), INITCAP(ENAME) FROM EMP; -- 대소문자를 바꿔주는문자함수 UPPER LOWER INITCAP
SELECT * FROM EMP WHERE UPPER(ENAME) = UPPER('scott'); --사원 이름이 SCOTT인 데이터 찾기
SELECT * FROM EMP WHERE UPPER(ENAME) LIKE UPPER('%scott%'); -- 사원 이름에 SCOTT단어를 포함한 데이터 찾기
-- 대소문자 상관없이 SCOTT데이터가 출력됨
SELECT UPPER(ENAME) FROM EMP;
SELECT ENAME, LENGTH(ENAME) FROM EMP; -- 문자열 길이를 구하는 LENGTH함수
SELECT ENAME, LENGTH(ENAME) FROM EMP WHERE LENGTH(ENAME) >= 5; -- WHERE절에서 사용하여 문자열 길이 비교 행 선별하기
SELECT LENGTH('한글'), LENGTHB('한글') FROM DUAL; -- LENGTHB함수로 문자열 데이터 길이가 아닌 바이트수 반환하기
SELECT * FROM EMP WHERE LENGTH(ENAME)>=6;
SELECT JOB, SUBSTR(JOB,1,2), SUBSTR(JOB,3,2), SUBSTR(JOB,5) FROM EMP; -- 문자열 일부를 추출하는 SUBSTR함수 사용 SUBSTR(문자열데이터,시작위치,추출길이)
SELECT SUBSTR(ENAME,3) FROM EMP;
SELECT JOB,
SUBSTR(JOB, -LENGTH(JOB)) -- CLERK의 -LENGTH부터 끝까지 출력
, SUBSTR(JOB, -LENGTH(JOB),2) -- CLERK의 -LENGTH부터 두 글자 출력
, SUBSTR(JOB, -3) FROM EMP; -- CLERK의 -3글자부터 끝까지 출력
SELECT INSTR('HELLO, ORACLE!', 'L') AS INSTR_1 -- 'L'의 시작위치
, INSTR('HELLO, ORACLE!', 'L',5) AS INSTR_2 -- 5번째 글자부터 'L'의 위치 조회
, INSTR('HELLO, ORACLE!', 'L',2,2) AS INSTR_3 FROM DUAL; -- 2번째 글자부터 두 번째 'L'이 있는 위치 조회
SELECT * FROM EMP WHERE INSTR(ENAME,'S')>0; -- INSTR함수로 사원이름에 'S'가 있는 행 구하기
SELECT * FROM EMP WHERE ENAME LIKE '%S%'; -- LIKE 연산자로 ENAME에 'S'가 있는 행 구하기
-- INSTR함수를 LIKE연산자처럼 사용하는 방식은 자주 쓰이진 않지만 응용할 수도 있음